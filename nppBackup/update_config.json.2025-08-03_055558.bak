script_name('ScriptUpdater')
script_author('Generated by Grok')
script_version('1.0')
script_properties("work-in-pause")

require "lib.moonloader"
local http = require "socket.http"
local ltn12 = require "ltn12"
local json = require "dkjson"
local inicfg = require "inicfg"
local encoding = require 'encoding'
encoding.default = 'CP1251'
local u8 = encoding.UTF8

-- Конфигурация
local GITHUB_USER = "egoist1313"
local GITHUB_REPO = "DunaevskiyLua"
local GITHUB_BRANCH = "main"
local CONFIG_URL = string.format("https://raw.githubusercontent.com/%s/%s/%s/update_config.json", GITHUB_USER, GITHUB_REPO, GITHUB_BRANCH)
local BASE_URL = string.format("https://raw.githubusercontent.com/%s/%s/%s/", GITHUB_USER, GITHUB_REPO, GITHUB_BRANCH)
local SAVE_PATH = getFolderPath(0x00) .. "\\moonloader\\LuaDunaevskiy\\"
local VERSIONS_FILE = SAVE_PATH .. "versions.ini"
local LOG_FILE = SAVE_PATH .. "updater.log"
local UPDATER_NAME = "updater.lua"

-- Локальные версии
local local_versions = {}
local updater_updated = false

-- Создание папки LuaDunaevskiy, если она не существует
function ensureDirectoryExists()
    local success, err = pcall(function()
        os.execute('mkdir "' .. SAVE_PATH .. '"')
    end)
    if not success then
        logToFile("Ошибка создания папки LuaDunaevskiy: " .. tostring(err))
    end
end

-- Логирование в файл
function logToFile(message)
    local file = io.open(LOG_FILE, "a")
    if file then
        file:write(os.date("[%Y-%m-%d %H:%M:%S] ") .. message .. "\n")
        file:close()
    end
end

-- Загрузка локальных версий
function loadLocalVersions()
    local_versions = inicfg.load({ Versions = {} }, VERSIONS_FILE)
    logToFile("Загружены локальные версии: " .. table.tostring(local_versions.Versions))
end

-- Проверка обновлений
function checkForUpdates()
    local response = {}
    local _, status = http.request {
        url = CONFIG_URL,
        sink = ltn12.sink.table(response)
    }
    if status ~= 200 then
        logToFile("Ошибка при загрузке update_config.json: HTTP " .. tostring(status))
        return false
    end
    local config, err = json.decode(table.concat(response))
    if not config or not config.scripts or err then
        logToFile("Ошибка парсинга update_config.json: " .. tostring(err))
        return false
    end
    remote_versions = config.scripts
    logToFile("Получены данные с GitHub: " .. table.tostring(remote_versions))
    return true
end

-- Сравнение версий
function isNewerVersion(local_ver, remote_ver)
    if not local_ver then return true end
    return local_ver ~= remote_ver -- Можно улучшить для числовых версий
end

-- Загрузка обновленных файлов
function downloadUpdates()
    ensureDirectoryExists() -- Создаем папку, если ее нет
    for _, script in ipairs(remote_versions) do
        local local_ver = local_versions.Versions[script.name]
        if isNewerVersion(local_ver, script.version) then
            local file_data = {}
            local url = BASE_URL .. script.path
            local _, status = http.request {
                url = url,
                sink = ltn12.sink.table(file_data)
            }
            if status == 200 then
                local content = table.concat(file_data)
                local file_path = SAVE_PATH .. script.name
                local file = io.open(file_path, "w")
                if file then
                    file:write(content)
                    file:close()
                    local_versions.Versions[script.name] = script.version
                    inicfg.save(local_versions, VERSIONS_FILE)
                    sampAddChatMessage(u8("[Updater] Обновлен " .. script.name .. " до версии " .. script.version), 0x00FF00)
                    logToFile("Обновлен " .. script.name .. " до версии " .. script.version)
                    if script.name == UPDATER_NAME then
                        updater_updated = true
                    end
                else
                    sampAddChatMessage(u8("[Updater] Ошибка записи файла " .. script.name), 0xFF0000)
                    logToFile("Ошибка записи файла " .. script.name)
                end
            else
                sampAddChatMessage(u8("[Updater] Ошибка загрузки " .. script.name .. ": HTTP " .. tostring(status)), 0xFF0000)
                logToFile("Ошибка загрузки " .. script.name .. ": HTTP " .. tostring(status))
            end
        else
            logToFile("Файл " .. script.name .. " актуален, версия: " .. tostring(local_ver))
        end
    end
end

-- Загрузка основных скриптов
function loadMainScripts()
    for _, script in ipairs(remote_versions) do
        if script.name ~= UPDATER_NAME then -- Не загружаем updater.lua повторно
            local script_path = SAVE_PATH .. script.name
            if doesFileExist(script_path) then
                local success, err = pcall(function()
                    loadScript(script_path)
                end)
                if success then
                    sampAddChatMessage(u8("[Updater] Загружен " .. script.name), 0x00FF00)
                    logToFile("Загружен " .. script.name)
                else
                    sampAddChatMessage(u8("[Updater] Ошибка загрузки " .. script.name .. ": " .. tostring(err)), 0xFF0000)
                    logToFile("Ошибка загрузки " .. script.name .. ": " .. tostring(err))
                end
            else
                sampAddChatMessage(u8("[Updater] Файл " .. script.name .. " не найден"), 0xFF0000)
                logToFile("Файл " .. script.name .. " не найден")
            end
        end
    end
end

-- Вспомогательная функция для преобразования таблицы в строку для логирования
function table.tostring(tbl)
    local result = "{"
    for k, v in pairs(tbl) do
        result = result .. k .. "=" .. tostring(v) .. ", "
    end
    return result .. "}"
end

-- Команда для перезагрузки скриптов
sampRegisterChatCommand("reload", function()
    local success, err = pcall(function()
        reloadScripts()
    end)
    if success then
        sampAddChatMessage(u8("[Updater] Скрипты перезагружены"), 0x00FF00)
        logToFile("Скрипты перезагружены")
    else
        sampAddChatMessage(u8("[Updater] Ошибка перезагрузки скриптов: " .. tostring(err)), 0xFF0000)
        logToFile("Ошибка перезагрузки скриптов: " .. tostring(err))
    end
end)

function main()
    if not isSampLoaded() or not isSampfuncsLoaded() then
        logToFile("Ошибка: SA:MP или sampfuncs не загружены")
        return
    end
    while not isSampAvailable() do wait(100) end

    sampAddChatMessage(u8"[Updater] Проверка обновлений...", 0x00FF00)
    logToFile("Начало проверки обновлений")

    loadLocalVersions()
    local success = checkForUpdates()

    if success then
        downloadUpdates()
        if updater_updated then
            sampAddChatMessage(u8"[Updater] Обновляльщик обновлен. Используйте /reload или перезапустите игру."), 0xFFFF00)
            logToFile("Обновляльщик обновлен, требуется перезагрузка")
        end
    else
        sampAddChatMessage(u8"[Updater] Не удалось проверить обновления", 0xFF0000)
        logToFile("Не удалось проверить обновления")
    end

    loadMainScripts()

    while true do wait(0) end -- Скрипт работает в фоновом режиме
end