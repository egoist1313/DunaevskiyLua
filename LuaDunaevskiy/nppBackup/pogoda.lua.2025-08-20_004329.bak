local script_name = 'WeatherTimeControl'
local script_version = '01/08/2025'
local imgui = require 'mimgui'
local sampev = require 'lib.samp.events'
local memory = require 'memory'
local encoding = require 'encoding'
local json = require 'dkjson'
encoding.default = 'CP1251'
local u8 = encoding.UTF8
local enableLogging = true -- Логирование (true - включено, false - отключено)
local enableAllWeatherIds = false -- Включение всех ID (0–255) в выпадающем списке (осторожно, баги!)

-- Путь к JSON-файлу настроек
local SETTINGS_JSON = getGameDirectory() .. "\\moonloader\\LuaDunaevskiy\\weather_time_settings.json"

-- Глобальные переменные
local state = {
    isWindowOpen = imgui.new.bool(false), -- Флаг видимости окна
    selectedWeather = imgui.new.int(-1), -- Выбранная погода (индекс в списке, -1 для пустой строки)
    selectedHour = imgui.new.int(12), -- Выбранный час
    selectedMinute = imgui.new.int(0), -- Выбранные минуты
    weatherLocked = false, -- Заморозка погоды в игре
    timeLocked = false, -- Заморозка времени в игре
    saveOnRestart = imgui.new.bool(false), -- Сохранение и фиксация при перезапуске
    lockedWeatherId = 0, -- Зафиксированное значение ID погоды
    lockedHour = 12, -- Зафиксированные значения времени
    lockedMinute = 0,
    customFont = nil, -- Шрифт для кириллицы
    settingsChanged = false -- Флаг изменения настроек
}

-- Список погодных условий (на основе https://wiki.multitheftauto.com/wiki/Weather)
local weatherList = {
    {comment = "Пустая строка по умолчанию", id = -1},
    {comment = "Чистое небо, эффект жары", id = 0},
    {comment = "Чистое небо, немного облаков", id = 1},
    {comment = "Чистое небо с лёгким смогом", id = 2},
    {comment = "Смог, слегка мутное небо", id = 3},
    {comment = "Облачное небо", id = 4},
    {comment = "Чистое небо, разнообразные эффекты", id = 5},
    {comment = "Очень чистое небо", id = 6},
    {comment = "Облачное небо", id = 7},
    {comment = "Дождь с молниями", id = 8},
    {comment = "Густой туман, низкая видимость", id = 9},
    {comment = "Чистое, сухое небо", id = 10},
    {comment = "Жаркое небо с эффектом жары", id = 11},
    {comment = "Облачное небо", id = 12},
    {comment = "Мутное, разнообразное небо", id = 13},
    {comment = "Чистое небо", id = 14},
    {comment = "Облачное небо", id = 15},
    {comment = "Дождь с молниями", id = 16},
    {comment = "Жаркое, сухое небо с эффектом жары", id = 17},
    {comment = "Чистое, сухое небо", id = 18},
    {comment = "Густая песчаная буря", id = 19},
    {comment = "Зелёное, мутное небо (как под водой)", id = 20},
    {comment = "Фиолетовый оттенок неба и объектов", id = 21},
    {comment = "Чёрно-белое небо, равномерный свет", id = 22},
    {comment = "Бледно-оранжевое небо", id = 23},
    {comment = "Бледно-оранжевое небо", id = 24},
    {comment = "Бледно-оранжевое небо", id = 25},
    {comment = "Бледно-оранжевое небо", id = 26},
    {comment = "Чистое голубое небо", id = 27},
    {comment = "Чистое голубое небо", id = 28},
    {comment = "Чистое голубое небо", id = 29},
    {comment = "Тёмное небо с бирюзовыми облаками", id = 30},
    {comment = "Тёмное небо с бирюзовыми облаками", id = 31},
    {comment = "Тёмное небо с бирюзовыми облаками", id = 32},
    {comment = "Тёмное небо с коричневыми облаками", id = 33},
    {comment = "Обычная погода с сине-фиолетовым оттенком", id = 34},
    {comment = "Тусклое коричневое небо", id = 35},
    {comment = "Яркое оранжевое небо с туманом", id = 36},
    {comment = "Яркое оранжевое небо с туманом", id = 37},
    {comment = "Яркое оранжевое небо с туманом", id = 38},
    {comment = "Очень яркое, ночь выглядит как день", id = 39},
    {comment = "Облачное небо с сине-фиолетовым оттенком", id = 40},
    {comment = "Облачное небо с сине-фиолетовым оттенком", id = 41},
    {comment = "Облачное небо с сине-фиолетовым оттенком", id = 42},
    {comment = "Токсичное, загрязнённое небо", id = 43},
    {comment = "Чёрно-белое небо, похоже на ID 22", id = 44}
}

-- Добавление нестандартных погодных ID (45–255), если enableAllWeatherIds = true
if enableAllWeatherIds then
    for id = 45, 60 do
        table.insert(weatherList, {
            comment = "Нормальная погода с графическими багами вечером",
            id = id
        })
    end
    table.insert(weatherList, {
        comment = "Странная погода, объекты исчезают",
        id = 100
    })
    table.insert(weatherList, {
        comment = "Штормовая погода с розовым небом и кристальной водой",
        id = 118
    })
    for id = 126, 150 do
        table.insert(weatherList, {
            comment = "Мерцающая красная баговая погода",
            id = id
        })
    end
    for id = 151, 175 do
        table.insert(weatherList, {
            comment = "Большая дистанция отрисовки, розовые/фиолетовые/бирюзовые облака",
            id = id
        })
    end
    for id = 176, 255 do
        table.insert(weatherList, {
            comment = "Экстремальная погода, возможны баги",
            id = id
        })
    end
end

-- Формируем список описаний для Combo
local weatherDescs = {}
for _, weather in ipairs(weatherList) do
    table.insert(weatherDescs, u8(weather.comment .. (weather.id >= 0 and " (ID: " .. weather.id .. ")" or "")))
end

-- Функция для создания директории
function ensureDirectoryExists(path)
    local success, err = pcall(function()
        os.execute('mkdir "' .. path .. '" 2>nul')
    end)
    if not success and enableLogging then
        print("[WeatherTimeControl] Failed to create directory: " .. path .. ": " .. tostring(err))
        sampAddChatMessage("[WeatherTimeControl] Не удалось создать папку: " .. path, 0xFF0000)
    end
end

-- Функция загрузки JSON
function loadJson(file_path, default_data)
    local dir_path = file_path:match("^(.*\\)[^\\]+$")
    if dir_path then ensureDirectoryExists(dir_path) end
    local file = io.open(file_path, "rb")
    if file then
        local content = file:read("*a"):gsub("^\239\187\191", "")
        file:close()
        local success, result = pcall(json.decode, content)
        if success and result then
            -- Преобразуем boolean и int значения в imgui.new.bool и imgui.new.int
            if result.saveOnRestart ~= nil then
                result.saveOnRestart = imgui.new.bool(result.saveOnRestart)
            end
            if result.selectedWeather ~= nil then
                result.selectedWeather = imgui.new.int(result.selectedWeather)
            end
            if result.selectedHour ~= nil then
                result.selectedHour = imgui.new.int(result.selectedHour)
            end
            if result.selectedMinute ~= nil then
                result.selectedMinute = imgui.new.int(result.selectedMinute)
            end
            return result
        else
            if enableLogging then
                print("[WeatherTimeControl] Failed to decode JSON: " .. file_path .. ": " .. tostring(result))
            end
        end
    else
        if enableLogging then
            print("[WeatherTimeControl] JSON file not found: " .. file_path)
        end
    end
    return default_data
end

-- Функция сохранения JSON
function saveJson(file_path, data)
    local dir_path = file_path:match("^(.*\\)[^\\]+$")
    if dir_path then ensureDirectoryExists(dir_path) end
    local file = io.open(file_path, "w")
    if file then
        local serialized_data = {
            selectedWeather = data.selectedWeather[0],
            selectedHour = data.selectedHour[0],
            selectedMinute = data.selectedMinute[0],
            weatherLocked = data.weatherLocked,
            timeLocked = data.timeLocked,
            saveOnRestart = data.saveOnRestart[0],
            lockedWeatherId = data.lockedWeatherId,
            lockedHour = data.lockedHour,
            lockedMinute = data.lockedMinute
        }
        local success, err = pcall(function()
            file:write(json.encode(serialized_data, { indent = true }))
        end)
        file:close()
        if success then
            if enableLogging then
                print("[WeatherTimeControl] Saved settings to JSON: " .. file_path)
            end
        else
            if enableLogging then
                print("[WeatherTimeControl] Failed to encode JSON: " .. file_path .. ": " .. tostring(err))
            end
        end
    else
        if enableLogging then
            print("[WeatherTimeControl] Failed to save JSON: " .. file_path)
        end
    end
end

-- Стиль ImGui, адаптированный из ScriptUpdater.lua
function applyStyle()
    imgui.OnInitialize(function()
        local style = imgui.GetStyle()
        local colors = style.Colors
        local clr = imgui.Col
        local ImVec4 = imgui.ImVec4
        style.WindowRounding = 15.0
        style.WindowTitleAlign = imgui.ImVec2(0.5, 0.5)
        style.FrameRounding = 10.0
        style.ScrollbarRounding = 10.0
        style.GrabRounding = 10.0
        style.ItemSpacing = imgui.ImVec2(8.0, 6.0)
        style.ScrollbarSize = 12.0
        style.GrabMinSize = 10.0
        style.ButtonTextAlign = imgui.ImVec2(0.5, 0.5)
        style.AntiAliasedLines = true
        style.AntiAliasedFill = true
        style.WindowBorderSize = 1.0
        style.FrameBorderSize = 0.5
        colors[clr.Text] = ImVec4(0.95, 0.95, 0.95, 1.00)
        colors[clr.WindowBg] = ImVec4(0.10, 0.10, 0.12, 0.85)
        colors[clr.FrameBg] = ImVec4(0.15, 0.15, 0.20, 0.70)
        colors[clr.FrameBgHovered] = ImVec4(0.25, 0.50, 0.75, 0.80)
        colors[clr.FrameBgActive] = ImVec4(0.30, 0.60, 0.85, 0.90)
        colors[clr.Button] = ImVec4(0.20, 0.40, 0.70, 0.70)
        colors[clr.ButtonHovered] = ImVec4(0.25, 0.50, 0.80, 0.90)
        colors[clr.ButtonActive] = ImVec4(0.30, 0.60, 0.90, 1.00)
        colors[clr.CheckMark] = ImVec4(0.30, 0.60, 0.90, 1.00)
        colors[clr.SliderGrab] = ImVec4(0.25, 0.50, 0.80, 1.00)
        colors[clr.SliderGrabActive] = ImVec4(0.30, 0.60, 0.90, 1.00)
    end)
end

function main()
    if not isSampLoaded() or not isSampfuncsLoaded() then
        if enableLogging then
            print("[WeatherTimeControl] Failed to load: samp or sampfuncs not loaded")
        end
        return
    end
    while not isSampAvailable() do wait(100) end

    -- Проверка доступности imgui
    if not imgui or not imgui.Begin or not imgui.End or not imgui.ImVec2 then
        if enableLogging then
            print("[WeatherTimeControl] Failed to load: imgui library is not properly initialized")
        end
        return
    end

    -- Загрузка сохранённых настроек
    local savedSettings = loadJson(SETTINGS_JSON, {})
    if savedSettings and savedSettings.saveOnRestart and savedSettings.saveOnRestart[0] then
        state.selectedWeather = savedSettings.selectedWeather or imgui.new.int(-1)
        state.selectedHour = savedSettings.selectedHour or imgui.new.int(12)
        state.selectedMinute = savedSettings.selectedMinute or imgui.new.int(0)
        state.weatherLocked = savedSettings.weatherLocked or false
        state.timeLocked = savedSettings.timeLocked or false
        state.saveOnRestart = savedSettings.saveOnRestart or imgui.new.bool(false)
        state.lockedWeatherId = savedSettings.lockedWeatherId or 0
        state.lockedHour = savedSettings.lockedHour or 12
        state.lockedMinute = savedSettings.lockedMinute or 0
        if state.weatherLocked then
            local success, err = pcall(function()
                memory.write(0xC81320, state.lockedWeatherId, 1, true)
            end)
            if not success and enableLogging then
                print("[WeatherTimeControl] Failed to restore weather: " .. tostring(err))
            end
        end
        if state.timeLocked then
            local success, err = pcall(function()
                memory.write(0xB70153, state.lockedHour, 1, true)
                memory.write(0xB70152, state.lockedMinute, 1, true)
            end)
            if not success and enableLogging then
                print("[WeatherTimeControl] Failed to restore time: " .. tostring(err))
            end
        end
    end

    -- Применение стиля
    applyStyle()

    -- Регистрация команды /den
    sampRegisterChatCommand("den", function()
        state.isWindowOpen[0] = not state.isWindowOpen[0]
        if enableLogging then
            sampAddChatMessage("[WeatherTimeControl] Window is now " .. (state.isWindowOpen[0] and "open" or "closed"), 0x00FF00)
            print("[WeatherTimeControl] Window toggled: " .. (state.isWindowOpen[0] and "open" or "closed"))
        end
    end)

    -- Основной цикл
    while true do
        wait(0)
        imgui.Process = state.isWindowOpen[0]
        -- Постоянная перезапись значений, если фиксация включена
        if state.weatherLocked then
            local success, err = pcall(function()
                memory.write(0xC81320, state.lockedWeatherId, 1, true)
            end)
            if not success and enableLogging then
                print("[WeatherTimeControl] Failed to set weather: " .. tostring(err))
            end
        end
        if state.timeLocked then
            local success, err = pcall(function()
                memory.write(0xB70153, state.lockedHour, 1, true)
                memory.write(0xB70152, state.lockedMinute, 1, true)
            end)
            if not success and enableLogging then
                print("[WeatherTimeControl] Failed to set time: " .. tostring(err))
            end
        end
        -- Сохранение настроек в JSON только при изменении
        if state.saveOnRestart[0] and state.settingsChanged then
            saveJson(SETTINGS_JSON, state)
            state.settingsChanged = false
        end
    end
end

imgui.OnFrame(function() return state.isWindowOpen[0] end, function()
    -- Проверка рендеринга
    if enableLogging then
        print("[WeatherTimeControl] Rendering frame")
    end

    -- Настройка шрифта
    if not state.customFont then
        local success, result = pcall(function()
            local fontPath = getFolderPath(0x14) .. '\\trebucbd.ttf'
            if doesFileExist(fontPath) then
                state.customFont = imgui.dx9.newFont(fontPath, 18.0, imgui.ImFontFlags.None, imgui.ImFontGlyphRanges.Cyrillic)
            else
                if enableLogging then
                    print("[WeatherTimeControl] Font not found: " .. fontPath)
                end
            end
        end)
        if not success and enableLogging then
            print("[WeatherTimeControl] Failed to load font: " .. tostring(result))
        end
    end

    if state.customFont then
        imgui.PushFont(state.customFont)
    end

    -- Установка размера и положения окна
    local screen_x, screen_y = getScreenResolution()
    imgui.SetNextWindowSize(imgui.ImVec2(300, 280), imgui.Cond.FirstUseEver)
    imgui.SetNextWindowPos(imgui.ImVec2(screen_x / 2, screen_y / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))
    
    local success, err = pcall(function()
        imgui.Begin(u8"Управление погодой и временем", state.isWindowOpen, imgui.WindowFlags.NoResize + imgui.WindowFlags.NoCollapse)

        -- Управление погодой
        imgui.Text(u8"Погода:")
        if imgui.BeginCombo("##weather", weatherDescs[state.selectedWeather[0] + 1]) then
            for i, weather in ipairs(weatherList) do
                if imgui.Selectable(weatherDescs[i], state.selectedWeather[0] == i - 1) then
                    state.selectedWeather[0] = i - 1
                    if weather.id >= 0 then
                        -- Автоматическая установка и фиксация погоды
                        state.weatherLocked = true
                        state.lockedWeatherId = weather.id
                        local success, err = pcall(function()
                            memory.write(0xC81320, weather.id, 1, true)
                        end)
                        if success then
                            if enableLogging then
                                print("[WeatherTimeControl] Set and locked weather to: " .. weather.comment .. " (ID: " .. weather.id .. ")")
                            end
                        elseif enableLogging then
                            print("[WeatherTimeControl] Failed to set weather: " .. tostring(err))
                        end
                        -- Отметка изменения настроек
                        state.settingsChanged = true
                    else
                        state.weatherLocked = false
                        state.settingsChanged = true
                    end
                end
            end
            imgui.EndCombo()
        end

        -- Управление временем
        imgui.Text(u8"Время суток:")
        local selectedHour = imgui.new.int(state.selectedHour[0])
        if imgui.SliderInt(u8"Часы", selectedHour, 0, 23, "%d") then
            state.selectedHour[0] = selectedHour[0]
            state.timeLocked = true
            state.lockedHour = state.selectedHour[0]
            local success, err = pcall(function()
                memory.write(0xB70153, state.lockedHour, 1, true)
            end)
            if success then
                if enableLogging then
                    print("[WeatherTimeControl] Set and locked hour to: " .. state.lockedHour)
                end
            elseif enableLogging then
                print("[WeatherTimeControl] Failed to set hour: " .. tostring(err))
            end
            -- Отметка изменения настроек
            state.settingsChanged = true
        end
        local selectedMinute = imgui.new.int(state.selectedMinute[0])
        if imgui.SliderInt(u8"Минуты", selectedMinute, 0, 59, "%d") then
            state.selectedMinute[0] = selectedMinute[0]
            state.timeLocked = true
            state.lockedMinute = state.selectedMinute[0]
            local success, err = pcall(function()
                memory.write(0xB70152, state.lockedMinute, 1, true)
            end)
            if success then
                if enableLogging then
                    print("[WeatherTimeControl] Set and locked minute to: " .. state.lockedMinute)
                end
            elseif enableLogging then
                print("[WeatherTimeControl] Failed to set minute: " .. tostring(err))
            end
            -- Отметка изменения настроек
            state.settingsChanged = true
        end

        -- Чекбокс "Сохранять при перезапуске"
        if imgui.Checkbox(u8"Сохранять при перезапуске", state.saveOnRestart) then
            if state.saveOnRestart[0] then
                state.weatherLocked = state.selectedWeather[0] >= 0
                state.timeLocked = true
                state.settingsChanged = true
                if enableLogging then
                    print("[WeatherTimeControl] Save on restart enabled: Weather ID " .. state.lockedWeatherId .. ", Time " .. string.format("%02d:%02d", state.lockedHour, state.lockedMinute))
                end
            else
                if doesFileExist(SETTINGS_JSON) then
                    pcall(os.remove, SETTINGS_JSON)
                    if enableLogging then
                        print("[WeatherTimeControl] Save on restart disabled, JSON file removed")
                    end
                end
            end
        end

        -- Кнопка сброса
        if imgui.Button(u8"Сброс", imgui.ImVec2(0, 0)) then
            state.weatherLocked = false
            state.timeLocked = false
            state.selectedWeather[0] = -1 -- Пустая строка
            state.selectedHour[0] = 12
            state.selectedMinute[0] = 0
            state.lockedWeatherId = 0
            state.lockedHour = 12
            state.lockedMinute = 0
            local success, err = pcall(function()
                memory.write(0xC81320, 0, 1, true) -- Сброс погоды на ID 0
                memory.write(0xB70153, 12, 1, true) -- Сброс часов на 12
                memory.write(0xB70152, 0, 1, true) -- Сброс минут на 0
            end)
            if success then
                if enableLogging then
                    print("[WeatherTimeControl] Reset weather to ID 0 and time to 12:00, lock disabled")
                end
            elseif enableLogging then
                print("[WeatherTimeControl] Failed to reset: " .. tostring(err))
            end
            -- Сохранение сброшенных настроек в JSON или удаление файла
            if state.saveOnRestart[0] then
                state.settingsChanged = true
            else
                if doesFileExist(SETTINGS_JSON) then
                    pcall(os.remove, SETTINGS_JSON)
                    if enableLogging then
                        print("[WeatherTimeControl] JSON file removed after reset")
                    end
                end
            end
        end

        imgui.End()
    end)
    if not success and enableLogging then
        print("[WeatherTimeControl] Rendering error: " .. tostring(err))
        sampAddChatMessage("[WeatherTimeControl] Ошибка рендеринга интерфейса", 0xFF0000)
    end

    if state.customFont then
        imgui.PopFont()
    end
end)